```python
import numpy as np

# Define parameters
num_input = 4  # Number of input neurons
num_output = 2  # Number of output neurons
rho = 0.7  # Vigilance parameter
theta = 0.5  # Matching parameter

# Initialize weights
W = np.random.rand(num_output, num_input) * 0.1  # Weight matrix
bias = np.random.rand(num_output) * 0.1  # Bias vector

# Input data
X = np.array([[0, 1, 1, 0],
              [1, 0, 1, 0],
              [0, 0, 1, 1]])
```

```python
# Function to calculate the activation
def calculate_activation(input_data):
    activations = np.dot(W, input_data) + bias
    return activations

# Function to normalize the activations
def normalize_activations(activations):
    normalized_activations = activations / np.sum(activations)
    return normalized_activations

# Function to find the winning neuron
def find_winner(activations):
    return np.argmax(activations)

# Function to update weights
def update_weights(input_data, winner):
    W[winner] = np.maximum(W[winner], input_data)
    return W

# Function to check vigilance
def check_vigilance(input_data, winner):
    return np.dot(W[winner], input_data) / np.sum(W[winner])
```

```python
# Main loop
for i in range(X.shape[0]):
    input_data = X[i]
    activations = calculate_activation(input_data)
    normalized_activations = normalize_activations(activations)
    winner = find_winner(normalized_activations)
    
    if np.max(normalized_activations) < theta:
        print("No winner found. Creating new cluster.")
        W = np.vstack([W, input_data])
        bias = np.append(bias, 0.1)
        num_output += 1
    else:
        vigilance = check_vigilance(input_data, winner)
        if vigilance > rho:
            print("Input accepted into cluster", winner)
            W = update_weights(input_data, winner)
        else:
            print("Input rejected. Creating new cluster.")
            W = np.vstack([W, input_data])
            bias = np.append(bias, 0.1)
            num_output += 1
```

```python
print("Final weights:")
print(W)
```
